# The Computer Language Benchmarks Game
# https://salsa.debian.org/benchmarksgame-team/benchmarksgame/
#
# Naive transliteration from Michael Ferguson's Chapel program
# contributed by Isaac Gouy

PI = 3.14159265358979323
SOLAR_MASS = 4 * PI * PI
DAYS_PER_YEAR = 365.24


str_round = func(value, power) {
    if isinstance(value, int) {
        io.print(1/0)
    }
    value = str(math.round(value, power))
    return value[:value.index(".")+power+1]
}


Body = class {
    __init__ = func(this, x, y, z, vx, vy, vz, mass) {
        this.x = x
        this.y = y
        this.z = z
        this.vx = vx
        this.vy = vy
        this.vz = vz
        this.mass = mass
    }
}

_offset_momentum = func(bodies, i=0) {
    if (i == bodies.len()) {
        px, py, pz = _offset_momentum(bodies, i+1)
    } else {
        px = py = pz = 0
    }
    body = bodies[i]
    return [px+body.vx*body.mass, py+body.vy*body.mass, pz+body.vz*body.mass]
}

offset_momentum = func(bodies) {
    px, py, pz = _offset_momentum(bodies)
    body = bodies[0]
    body.vx = -px / SOLAR_MASS
    body.vy = -py / SOLAR_MASS
    body.vz = -pz / SOLAR_MASS
}


_energy = func(bodies, j, body_i) {
    if (j == bodies.len()) { return 0 }
    body_j = bodies[j]
    dx = body_i.x - body_j.x
    dy = body_i.y - body_j.y
    dz = body_i.z - body_j.z
    sq = dx*dx + dy*dy + dz*dz
    body_j_energy = (body_i.mass * body_j.mass) / math.sqrt(sq)
    return _energy(bodies, j+1, body_i) + body_j_energy
}

energy = func(bodies, i=0) {
    if (i == bodies.len()) { return 0 }
    body_i = bodies[i]
    sq = body_i.vx*body_i.vx + body_i.vy*body_i.vy + body_i.vz*body_i.vz
    body_i_energy = 0.5 * bodies[i].mass * sq
    body_i_energy -= _energy(bodies, i+1, body_i)
    return energy(bodies, i+1) + body_i_energy
}


__advance = func(bodies, dt, body_i, j) {
    if (j == bodies.len()) { return }
    __advance(bodies, dt, body_i, j+1)

    body_j = bodies[j]
    dx, dy, dz = body_i.x-body_j.x, body_i.y-body_j.y, body_i.z-body_j.z
    dpos_norm_sq = dx*dx + dy*dy + dz*dz
    mag = dt / (dpos_norm_sq * math.sqrt(dpos_norm_sq))

    mj = body_j.mass * mag
    body_i.vx -= dx * mj
    body_i.vy -= dy * mj
    body_i.vz -= dz * mj

    mi = body_i.mass * mag
    body_j.vx += dx * mi
    body_j.vy += dy * mi
    body_j.vz += dz * mi
}

_advance = func(bodies, dt, i=0) {
    if (i == bodies.len()) { return }
    _advance(bodies, dt, i+1)
    __advance(bodies, dt, bodies[i], i+1)
}

___advance = func(bodies, dt, i=0) {
    if (i == bodies.len()) { return }
    ___advance(bodies, dt, i+1)
    body = bodies[i]
    body.x += body.vx * dt
    body.y += body.vy * dt
    body.z += body.vz * dt
}


advance = func(bodies, dt, n) {
    if (n == 0) { return }
    advance(bodies, dt, n-1)
    _advance(bodies, dt)
    ___advance(bodies, dt)
}

nbody = func(n) {
    bodies = [
                # sun
                Body(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, SOLAR_MASS),
                # jupiter
                Body(
                    4.84143144246472090e+00,
                    -1.16032004402742839e+00,
                    -1.03622044471123109e-01,
                    1.66007664274403694e-03 * DAYS_PER_YEAR,
                    7.69901118419740425e-03 * DAYS_PER_YEAR,
                    -6.90460016972063023e-05 * DAYS_PER_YEAR,
                    9.54791938424326609e-04 * SOLAR_MASS
                ),
                # saturn
                Body(
                    8.34336671824457987e+00,
                    4.12479856412430479e+00,
                    -4.03523417114321381e-01,
                    -2.76742510726862411e-03 * DAYS_PER_YEAR,
                    4.99852801234917238e-03 * DAYS_PER_YEAR,
                    2.30417297573763929e-05 * DAYS_PER_YEAR,
                    2.85885980666130812e-04 * SOLAR_MASS
                ),
                # uranus
                Body(
                    1.28943695621391310e+01,
                    -1.51111514016986312e+01,
                    -2.23307578892655734e-01,
                    2.96460137564761618e-03 * DAYS_PER_YEAR,
                    2.37847173959480950e-03 * DAYS_PER_YEAR,
                    -2.96589568540237556e-05 * DAYS_PER_YEAR,
                    4.36624404335156298e-05 * SOLAR_MASS
                ),
                # neptune
                Body(
                    1.53796971148509165e+01,
                    -2.59193146099879641e+01,
                    1.79258772950371181e-01,
                    2.68067772490389322e-03 * DAYS_PER_YEAR,
                    1.62824170038242295e-03 * DAYS_PER_YEAR,
                    -9.51592254519715870e-05 * DAYS_PER_YEAR,
                    5.15138902046611451e-05 * SOLAR_MASS
                ),
             ]
    offset_momentum(bodies)
    io.print(str_round(energy(bodies), 3))

    advance(bodies, 0.01, n)
    io.print(str_round(energy(bodies), 3))
}


n = int(cmd_args[0])
nbody(n)